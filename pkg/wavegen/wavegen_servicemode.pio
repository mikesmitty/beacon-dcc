; Beacon DCC Command Station Waveform Generator
; Copyright (C) 2025  Michael Smith
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.


; This PIO program generates the DCC waveform for a command station.
; It handles the preamble, message start, idle packets, and bit generation.
;
; The input format is an 8 bit number containing the number of bytes in the message,
; followed by the data bytes. For example, the standard idle packet is 0x3FF00FF
; 3 for the length, followed by 11111111 00000000 11111111
; The message start bit, byte terminating bits, and the packet end bit are added automatically.
; If the FIFO is empty the statemachine will send reset packets until stopped.

.program wavegenServiceMode

.wrap_target

set y, 15                  ; Set the preamble length to 16 (n-1)
preamble:
    set pins, 0b1     [28] ; Set pin high for the preamble
    set pins, 0b0     [27] ; Set pin low for the preamble
    jmp y--, preamble

    ; Message start bit begins with a high half-wave
    set pins, 0b1 

    ; Generate an idle packet (0x3FF00FF) in case the FIFO is empty
    set x, 3               ; Set x to 3 for the length
    mov isr, x             ; Byte 1
    in NULL, 24            ; Byte 2-4
    mov x, isr             ; Put the pattern into x as the default pull value

    ; Pull the next encoded start packet from the FIFO
    pull noblock           ; Will receive idle packet from x if FIFO is empty
    out y, 8               ; Store the byte count of the message in y
    jmp byte_reset         ; Jump to the byte loop reset

byte_loop:
    mov isr, y             ; Store the bytes remaining in the ISR
    jmp mid_zero      [15] ; Jump to the middle section of the separator byte

bit_loop:
    out y, 1               ; Pull an output bit to y
    jmp y--, short_low     ; Short-circuit the middle for a 1-bit
mid_zero:
    ; Add the extra duration for a zero bit to the middle section
    nop               [28] ; Zero high part 2
    set pins, 0b0     [28] ; Zero low part 1

short_low:
    set pins, 0b0     [28] ; Low half-wave

new_bit:
    set pins, 0b1     [25] ; High half-wave (starting new bit)
    jmp x--, bit_loop      ; Loop back for the next bit
    mov y, isr        [2]  ; Restore the bytes remaining counter from the ISR

byte_reset:
    set x, 8               ; Set x to 8 for the next byte loop
    jmp y--, byte_loop     ; Loop back for the next byte

    set pins, 0b0     [27] ; Second half of packet end bit

.wrap

% go {
//go:build rp

package wavegen

import (
	pio "github.com/tinygo-org/pio/rp2-pio"
)
%}
